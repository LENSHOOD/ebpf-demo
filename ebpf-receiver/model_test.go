package ebpf_receiver

import (
	"testing"

	"go.opentelemetry.io/collector/pdata/pcommon"
)

func Test_tryHttp2(t *testing.T) {
	type args struct {
		data  []byte
		attrs pcommon.Map
	}
	tests := []struct {
		name string
		args args
	}{
		{
			name: "Test GRPC",
			args: args{
				data: []byte{
					0x00, 0x00, 0xbd, 0x01, 0x04, 0x00, 0x00, 0x00, 0x01, 0x83, 0x86, 0x45, 0x99, 0x60, 0xe9, 0x2d,
					0x12, 0x16, 0x93, 0xaf, 0xba, 0x73, 0x57, 0x59, 0xaa, 0x9b, 0x71, 0x6c, 0xee, 0x62, 0x15, 0x8c,
					0x45, 0x4e, 0xcb, 0x4e, 0x92, 0xff, 0x41, 0x8a, 0x44, 0xe6, 0xae, 0xb3, 0x55, 0x35, 0xc7, 0x80,
					0xf0, 0x3f, 0x5f, 0x8b, 0x1d, 0x75, 0xd0, 0x62, 0x0d, 0x26, 0x3d, 0x4c, 0x4d, 0x65, 0x64, 0x7a,
					0x8a, 0x9a, 0xca, 0xc8, 0xb4, 0xc7, 0x60, 0x2b, 0xba, 0x15, 0xc1, 0x40, 0x02, 0x74, 0x65, 0x86,
					0x4d, 0x83, 0x35, 0x05, 0xb1, 0x1f, 0x40, 0x8e, 0x9a, 0xca, 0xc8, 0xb0, 0xc8, 0x42, 0xd6, 0x95,
					0x8b, 0x51, 0x0f, 0x21, 0xaa, 0x9b, 0x83, 0x9b, 0xd9, 0xab, 0x40, 0x88, 0x4d, 0x83, 0x21, 0x6b,
					0x1d, 0x85, 0xa9, 0x3f, 0xa7, 0x00, 0x16, 0x8e, 0x46, 0xa3, 0x1b, 0xd2, 0x05, 0x99, 0x1b, 0x13,
					0xc1, 0x23, 0x2e, 0x12, 0x38, 0xdc, 0x7c, 0x21, 0x13, 0x65, 0x6c, 0x8e, 0xb2, 0xca, 0xc0, 0x8c,
					0x62, 0x74, 0x60, 0x79, 0xf7, 0x8a, 0x40, 0x32, 0x40, 0xac, 0x00, 0xff, 0x40, 0x85, 0x8c, 0x73,
					0x4c, 0x39, 0x8b, 0xa2, 0x41, 0x50, 0x83, 0x1e, 0xa5, 0xcd, 0x24, 0x0d, 0xb8, 0xd0, 0xd9, 0x14,
					0x8f, 0x2c, 0x18, 0xe3, 0x22, 0xcd, 0x46, 0xf3, 0xab, 0x3c, 0xe8, 0x08, 0xb4, 0x6c, 0x92, 0x41,
					0x01, 0xc6, 0xdd, 0x95, 0xc1, 0x7f},
				attrs: pcommon.NewMap(),
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if err := tryHttp2(tt.args.data, &tt.args.attrs); err != nil {
				t.Fatal(err)
			}

			hasTraceparent := false
			tt.args.attrs.Range(
				func(k string, v pcommon.Value) bool {
					if k == "traceparent" {
						hasTraceparent = true
					}
					return true
				},
			)

			if !hasTraceparent {
				t.Fatalf("no traceparent parsed!")
			}
		})
	}
}
