package ebpf_receiver

import (
	"testing"

	"go.opentelemetry.io/collector/pdata/pcommon"
)

func Test_tryPgsql(t *testing.T) {
	type args struct {
		data  []byte
		attrs pcommon.Map
	}
	tests := []struct {
		name string
		args args
		hasQuery bool
	}{
		{
			name: "Test PG Has Parse",
			args: args{
				data: []byte{
					0x50, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x20, 0x66,
					0x72, 0x6f, 0x6d, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00,
					0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x06, 0x50, 0x00,
					0x45, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x53, 0x00, 0x00, 0x00, 0x04,
				},
				attrs: pcommon.NewMap(),
			},
			hasQuery: true,
		},
		{
			name: "Test PG Doesn't Have Parse",
			args: args{
				data: []byte{
					0x31, 0x00, 0x00, 0x00, 0x04, 0x32, 0x00, 0x00, 0x00, 0x04, 0x54, 0x00, 0x00, 0x00, 0x32, 0x00,
					0x02, 0x69, 0x64, 0x00, 0x00, 0x00, 0x40, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04,
					0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x00, 0x00, 0x00, 0x40, 0x05, 0x00,
					0x02, 0x00, 0x00, 0x04, 0x13, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x44, 0x00, 0x00,
					0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00, 0x00, 0x01, 0x31, 0x44, 0x00,
					0x00, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00, 0x00, 0x01, 0x61, 0x43,
					0x00, 0x00, 0x00, 0x0d, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x20, 0x32, 0x00, 0x5a, 0x00, 0x00,
					0x00, 0x05, 0x49,

				},
				attrs: pcommon.NewMap(),
			},
			hasQuery: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if err := tryPgsql(tt.args.data, &tt.args.attrs); err != nil {
				t.Log(err)
			}

			hasQuery := false
			tt.args.attrs.Range(
				func(k string, v pcommon.Value) bool {
					t.Logf("Attr - Name: %s, Val: %s", k, v.AsString())
					if k == "Query" {
						hasQuery = true
					}
					return true
				},
			)

			if tt.hasQuery != hasQuery {
				t.Fatalf("test failed")
			}
		})
	}
}
